function plotflow(x,y,u,maxamp)
% USAGE    : plotflow([x,y],u,[maxamp])
% FUNCTION : Shows the 2D flow stored as a complex image u, at the position (x,y). If
% the field 'maxamp' is present, all the values of abs(u) that are larger 
% than maxamp are saturated to this value.
%
% The choice of the representation is either by vectors, or by colors, or
% both. This choice is stored in the variable 'plottype', which may assume
% the values: 'quiver', 'colors', 'colorsinv', 'both', and 'bothinv'.
% A compass indicating the relation between the color code and the
% direction can be included in the representation by setting 'showlegend'
% to 1.
%
% DEFAULTS : * if x and y are absent, the line and column indices are used
%              instead
%            * if 'maxamp' is not present, the 99 percentile of abs(u) is
%              chosen
%
% The flow (quiver) can be overlayed with an image sequence (generated by 
% imview.m) by 'holding on' the image sequence.
%
% DATE     : 30 November 2014
% AUTHOR   : Thierry Blu, mailto:thierry.blu@m4x.org

showlegend=1;
if ishold
    plottype='quiver';
else
    plottype='bothinv';
end

if nargin==1                % Only u is passed
    u=x;
    [M,N]=size(u);
    x=(1:M)'*ones(1,N);
    y=ones(M,1)*(1:N);
end
if nargin==2                % Only u and maxamp are passed
    u=x;
    maxamp=y;
    [M,N]=size(u);
    x=(1:M)'*ones(1,N);
    y=ones(M,1)*(1:N);
end
if ~exist('maxamp','var')
    v=sort(abs(u(find(~isnan(u)))));
    if isempty(v)
        error('There are only NaN values in the flow!')
    else
        maxamp=v(round(0.99*length(v)));
    end
end
u(find(isinf(u)))=NaN;
[M,N]=size(u);
ux=real(u);
uy=imag(u);
sampling=min([M N 30]);
Kx=floor(M/sampling);
Ky=floor(N/sampling);

ampfactor=max(max(abs(u(1:Ky:end,1:Kx:end))))/maxamp/0.7;

u=min(abs(u),maxamp).*exp(i*angle(u)); 	% Thresholding the velocity map, only for the color representation

switch plottype
    case 'quiver'
        h=quiver(y(1:Ky:end,1:Kx:end),x(1:Ky:end,1:Kx:end),uy(1:Ky:end,1:Kx:end),ux(1:Ky:end,1:Kx:end),ampfactor);
        if ishold
            him=findobj(gcf,'type','image');
            a=get(him,'userdata');
            [~,~,c]=size(a{3}{1});
            if c==1
                % grayscale image
                I=zeros(M,N,3);
                u=u./(abs(u)+maxamp/15);
                u1=real(i*u);
                u2=real(i*u*exp(-2*i*pi/3));
                u3=real(i*u*exp(2*i*pi/3));
                v=max(max(-u1,-u2),-u3);
                I(:,:,1)=v+u1;
                I(:,:,2)=v+u2;
                I(:,:,3)=v+u3;
                I=max(1-I*2,0);
%                 I=max(1-I/maxamp*2,0);
%                 I=3*max(I,0)/median(a{3}{1}(:))*255;                
                for k=1:length(a{3})
                    J=a{3}{k}/255;
                    a{3}{k}(:,:,1)=min(I(:,:,1).*J,1);
                    a{3}{k}(:,:,2)=min(I(:,:,2).*J,1);
                    a{3}{k}(:,:,3)=min(I(:,:,3).*J,1);
                end
                set(him,'cdata',a{3}{1},'userdata',a);
                set(h,'color',[0.999 1 0.999])
            else
                % color image
%                 set(h,'color',[0.999 1 0.999])
                set(h,'color','y')
%                 axis off
            end
        else
            axis equal,axis tight
        end

    case 'colors'
        I=zeros(M,N,3);
        u1=-real(i*u);
        u2=-real(i*u*exp(-2*i*pi/3));
        u3=-real(i*u*exp(2*i*pi/3));
        v=max(max(-u1,-u2),-u3);
        I(:,:,1)=v+u1;
        I(:,:,2)=v+u2;
        I(:,:,3)=v+u3;
        I=I/maxamp;
        I=min(max(I,0),1);
        image(y(1,:),x(:,1),I),axis image
        
    case 'colorsinv'
        I=zeros(M,N,3);
        u1=real(i*u);
        u2=real(i*u*exp(-2*i*pi/3));
        u3=real(i*u*exp(2*i*pi/3));
        v=max(max(-u1,-u2),-u3);
        I(:,:,1)=v+u1;
        I(:,:,2)=v+u2;
        I(:,:,3)=v+u3;
        I=1-I/maxamp/sqrt(3);
        I=min(max(I,0),1);
        image(y(1,:),x(:,1),I),axis image
        
    case 'both'
        I=zeros(M,N,3);
        u1=-real(i*u);
        u2=-real(i*u*exp(-2*i*pi/3));
        u3=-real(i*u*exp(2*i*pi/3));
        v=max(max(-u1,-u2),-u3);
        I(:,:,1)=v+u1;
        I(:,:,2)=v+u2;
        I(:,:,3)=v+u3;
        I=I/maxamp;
        I=min(max(I,0),1);
        image(y(1,:),x(:,1),I),axis image
        hold on
        h=quiver(y(1:Ky:end,1:Kx:end),x(1:Ky:end,1:Kx:end),uy(1:Ky:end,1:Kx:end),ux(1:Ky:end,1:Kx:end),ampfactor);
        set(h,'color',[1 1 1])
        hold off

    case 'bothinv'
        I=zeros(M,N,3);
        u1=real(i*u);
        u2=real(i*u*exp(-2*i*pi/3));
        u3=real(i*u*exp(2*i*pi/3));
        v=max(max(-u1,-u2),-u3);
        I(:,:,1)=v+u1;
        I(:,:,2)=v+u2;
        I(:,:,3)=v+u3;
        I=1-I/maxamp/sqrt(3);
        I=min(max(I,0),1);
        image(y(1,:),x(:,1),I),axis image
        hold on
        h=quiver(y(1:Ky:end,1:Kx:end),x(1:Ky:end,1:Kx:end),uy(1:Ky:end,1:Kx:end),ux(1:Ky:end,1:Kx:end),ampfactor);
        set(h,'color',[0 0 0])
        hold off
end
% set(gca,'ydir','reverse','fontsize',14)
% ylabel('$i$ coordinate','interpreter','latex')
% xlabel('$j$ coordinate','interpreter','latex')

if showlegend
    rosedesvents
end
hold off

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%% EMBEDDED FUNCTIONS %%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function rosedesvents
rosesize=0.11;
Nbranches=12;
position='topright';
% position='topleft';
% position='bottomleft';
% position='bottomright';

him=findobj(gcf,'type','image');
I=get(him,'cdata');
if iscell(I),
    [Mli,Mcol,P]=size(I{2});
    u=I{2}(:,:,1)+I{2}(:,:,2)*exp(2*i*pi/3)+I{2}(:,:,3)*exp(4*i*pi/3);
else
    [Mli,Mcol,P]=size(I);
    u=I(:,:,1)+I(:,:,2)*exp(2*i*pi/3)+I(:,:,3)*exp(4*i*pi/3);
end

b=min(Mli,Mcol)*rosesize;
switch position
    case 'topright'   
        x0=Mcol-0.5-b;
        y0=1.5+b;
    case 'topleft'   
        x0=1.5+b;
        y0=1.5+b;
    case 'bottomleft'   
        x0=1.5+b;
        y0=Mli-0.5-b;
    case 'bottomright'   
        x0=Mcol-0.5-b;
        y0=Mli-0.5-b;
end
a=0.75*b;
d=2*pi/Nbranches;

hold on
% background of the rose
t=0:0.01:1;
x=x0+b*cos(2*pi*t);
y=y0+b*sin(2*pi*t);
plottype=evalin('caller','plottype');
if strcmp(plottype,'both')|strcmp(plottype,'colors')
    dark=0.9;
else
    dark=0.1;
end
fill(x,y,(1-dark)*[1 1 1],'EdgeColor',(1-dark)*[1 1 1]);

for n=0:(Nbranches-1)
    u0=i*exp(-i*d*n);
    u1=real(i*u0);
    u2=real(i*u0*exp(-2*i*pi/3));
    u3=real(i*u0*exp(2*i*pi/3));
    v=max(max(-u1,-u2),-u3);
    c(1)=v+u1;
    c(2)=v+u2;
    c(3)=v+u3;
    c=1-c/sqrt(3);
    c=min(max(c,0),1);
    xlight=x0+[0 a*cos(d*(n+0.5)) b*cos(d*n) 0];
    ylight=y0+[0 a*sin(d*(n+0.5)) b*sin(d*n) 0];
    xdark=x0+[0 b*cos(d*n) a*cos(d*(n-0.5)) 0];
    ydark=y0+[0 b*sin(d*n) a*sin(d*(n-0.5)) 0];
    fill(xlight,ylight,c,'edgecolor',c)
    fill(xdark,ydark,c/2,'edgecolor',c/2)
end
hold off

return
